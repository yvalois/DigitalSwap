{
  "address": "0xeF67c05fB5D282A382d03d30cf7a127cD81094cf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "_cop",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "_usd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdCopFeed",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_wbtc",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_fee",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_daysInSellPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_periodSellLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artificialPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        }
      ],
      "name": "calculateAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "copToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daysInSellPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "copAmountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOutInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailableUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCopPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalLiquidityInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodSellLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "salesInPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startOfPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_artificialPrice",
          "type": "int256"
        }
      ],
      "name": "setArtificialPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newDaysInSellPeriod",
          "type": "uint256"
        }
      ],
      "name": "setDaysInSellPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_fee",
          "type": "uint16"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimum",
          "type": "uint256"
        }
      ],
      "name": "setLiquiditySlots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriodSellLimit",
          "type": "uint256"
        }
      ],
      "name": "setPeriodSellLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slotAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slotAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slotMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapCOPForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapCOPForTokensPreview",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapMaticForCOP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapMaticForCOPPreview",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForCOP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForCOPPreview",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferAnyERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferMatic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbtcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xea1836fc1c820ee1a7fe96424f7a059c1762a15ee6cc7bbbe16dfcfcc9624cd0",
  "receipt": {
    "to": null,
    "from": "0x92746af69e490D792973d43B4Ea26937ea1a6b98",
    "contractAddress": "0xeF67c05fB5D282A382d03d30cf7a127cD81094cf",
    "transactionIndex": 15,
    "gasUsed": "3356343",
    "logsBloom": "0x
    "blockHash": "0x4400121be9db0c3826b57aad3e90f0b51de35da605df556669da5632679a41fb",
    "transactionHash": "0xea1836fc1c820ee1a7fe96424f7a059c1762a15ee6cc7bbbe16dfcfcc9624cd0",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 26864733,
        "transactionHash": "0xea1836fc1c820ee1a7fe96424f7a059c1762a15ee6cc7bbbe16dfcfcc9624cd0",
        "address": "0xeF67c05fB5D282A382d03d30cf7a127cD81094cf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000092746af69e490d792973d43b4ea26937ea1a6b98"
        ],
        "data": "0x",
        "logIndex": 86,
        "blockHash": "0x4400121be9db0c3826b57aad3e90f0b51de35da605df556669da5632679a41fb"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 26864733,
        "transactionHash": "0xea1836fc1c820ee1a7fe96424f7a059c1762a15ee6cc7bbbe16dfcfcc9624cd0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000092746af69e490d792973d43b4ea26937ea1a6b98",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000025434cf0a5e24b50000000000000000000000000000000000000000000000000864074c981f015a0000000000000000000000000000000000000000000044eaad70387ed875f871000000000000000000000000000000000000000000000000060fd27d8dc0dca50000000000000000000000000000000000000000000044eaafc46d4de2d41d26",
        "logIndex": 87,
        "blockHash": "0x4400121be9db0c3826b57aad3e90f0b51de35da605df556669da5632679a41fb"
      }
    ],
    "blockNumber": 26864733,
    "cumulativeGasUsed": "5794455",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1659fFb2d40DfB1671Ac226A0D9Dcc95A774521A",
    "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
    "0xDe6302Dfa0ac45B2B1b1a23304469DA630b2F59B",
    "0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6",
    "0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff",
    30,
    3,
    "500000000000000000000000"
  ],
  "numDeployments": 6,
  "solcInputHash": "28fc546c1936670cbbbc7f20c589cb84",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_cop\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_usd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdCopFeed\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_wbtc\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_daysInSellPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodSellLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artificialPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"calculateAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"copToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysInSellPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"copAmountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCopPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLiquidityInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodSellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"salesInPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startOfPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_artificialPrice\",\"type\":\"int256\"}],\"name\":\"setArtificialPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDaysInSellPeriod\",\"type\":\"uint256\"}],\"name\":\"setDaysInSellPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setLiquiditySlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriodSellLimit\",\"type\":\"uint256\"}],\"name\":\"setPeriodSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapCOPForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapCOPForTokensPreview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapMaticForCOP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapMaticForCOPPreview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForCOP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapTokensForCOPPreview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferAnyERC20(address,address,uint256)\":{\"params\":{\"_amount\":\"amount of tokens to unlock\",\"_to\":\"the address to send the tokens to\",\"_tokenAddress\":\"the address of the tokens to unlock\"}},\"transferMatic(address,uint256)\":{\"params\":{\"_amount\":\"amount of tokens to unlock\",\"_to\":\"the address to send the tokens to\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLatestPrice()\":{\"notice\":\"Returns the latest price\"},\"transferAnyERC20(address,address,uint256)\":{\"notice\":\"called when the owner wants to unlock erc20 tokens owned by the contract\"},\"transferMatic(address,uint256)\":{\"notice\":\"called when owner wants to unlock Matic owned by the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PegDex.sol\":\"PegDex\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/PegDex.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./PriceConsumerV3.sol\\\";\\nimport \\\"./SellLimitter.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\ncontract PegDex is PriceConsumerV3, Ownable, ReentrancyGuard, SellLimitter {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Metadata;\\n\\n    IUniswapV2Router02 private router;\\n    IERC20Metadata public copToken;\\n    IERC20Metadata public usdToken;\\n    IERC20 public wbtcToken;\\n    uint16 public fee;\\n    address public WETH;\\n    int256 public artificialPrice;\\n    uint256 public slotAmount;\\n    uint256 public slotAvailable;\\n    uint256 public slotMinimum;\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"PegDex: DEADLINE_EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20Metadata _cop,\\n        IERC20Metadata _usd,\\n        address _usdCopFeed,\\n        IERC20 _wbtc,\\n        IUniswapV2Router02 _router,\\n        uint16 _fee,\\n        uint256 _daysInSellPeriod,\\n        uint256 _periodSellLimit\\n    ) PriceConsumerV3(_usdCopFeed) {\\n        copToken = _cop;\\n        usdToken = _usd;\\n        wbtcToken = _wbtc;\\n        router = _router;\\n        fee = _fee;\\n        WETH = router.WETH();\\n        daysInSellPeriod = _daysInSellPeriod;\\n        periodSellLimit = _periodSellLimit;\\n    }\\n\\n    event Swapped(\\n        address sender,\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    );\\n\\n    function wBTCToUSD(uint256 wBTCAmount) private view returns (uint256) {\\n        return\\n            amountOutFromRouter(\\n                address(wbtcToken),\\n                wBTCAmount,\\n                address(usdToken)\\n            );\\n    }\\n\\n    function usdToWBTC(uint256 usdAmount) private view returns (uint256) {\\n        return\\n            amountOutFromRouter(\\n                address(usdToken),\\n                usdAmount,\\n                address(wbtcToken)\\n            );\\n    }\\n\\n    function amountOutFromRouter(\\n        address tokenIn,\\n        uint256 tokenInAmount,\\n        address tokenOut\\n    ) private view returns (uint256) {\\n        if (tokenInAmount == 0) {\\n            return 0;\\n        }\\n        address[] memory path = new address[](2);\\n        path[0] = address(tokenIn);\\n        path[1] = address(tokenOut);\\n        uint256[] memory outputs = router.getAmountsOut(tokenInAmount, path);\\n        return outputs[1];\\n    }\\n\\n    function getRequiredWBTCForUsd(uint256 usdAmount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            getRequiredAmountInFromRouter(\\n                address(wbtcToken),\\n                address(usdToken),\\n                usdAmount\\n            );\\n    }\\n\\n    function getRequiredUsdForWBTC(uint256 wbtcAmount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            getRequiredAmountInFromRouter(\\n                address(usdToken),\\n                address(wbtcToken),\\n                wbtcAmount\\n            );\\n    }\\n\\n    function getRequiredAmountInFromRouter(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 tokenOutAmount\\n    ) private view returns (uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(tokenIn);\\n        path[1] = address(tokenOut);\\n        uint256[] memory amountsIn = router.getAmountsIn(tokenOutAmount, path);\\n        return amountsIn[0];\\n    }\\n\\n    function swapReserveTokenToCOP(\\n        IERC20 token,\\n        uint256 amountIn,\\n        uint256 minAmountOut\\n    ) private returns (uint256 amountOut) {\\n        uint256 totalUsd = amountIn;\\n        if (address(token) == address(wbtcToken)) {\\n            totalUsd = wBTCToUSD(amountIn);\\n        }\\n        amountOut = usdToCop(totalUsd);\\n        require(amountOut >= minAmountOut, \\\"PegDex: INSUFFICIENT_OUTPUT\\\");\\n        copToken.safeTransfer(msg.sender, amountOut);\\n    }\\n\\n    function sendAmountOfUSDInReserveToken(\\n        uint256 amount,\\n        IERC20 token,\\n        uint256 minAmountOut\\n    ) private returns (uint256 amountOut) {\\n        if (address(token) == address(wbtcToken)) {\\n            amount = usdToWBTC(amount);\\n        }\\n        amountOut = obtainFinalReserveAmountToTransfer(token, amount);\\n        require(amountOut >= minAmountOut, \\\"PegDex: INSUFFICIENT_OUTPUT\\\");\\n        token.safeTransfer(msg.sender, amountOut);\\n    }\\n\\n    function obtainFinalReserveAmountToTransfer(\\n        IERC20 token,\\n        uint256 desiredAmount\\n    ) private returns (uint256) {\\n        uint256 balance = token.balanceOf(address(this));\\n        if (desiredAmount > balance) {\\n            // Try to swap from the other reserve currency to complete the amount\\n            uint256 missingAmount = desiredAmount - balance;\\n            uint256 amountIn = address(token) == address(usdToken)\\n                ? getRequiredWBTCForUsd(missingAmount)\\n                : getRequiredUsdForWBTC(missingAmount);\\n            address(token) == address(usdToken)\\n                ? wbtcToken.safeIncreaseAllowance(address(router), amountIn)\\n                : usdToken.safeIncreaseAllowance(address(router), amountIn);\\n            address[] memory path = new address[](2);\\n            path[0] = address(token) == address(usdToken)\\n                ? address(wbtcToken)\\n                : address(usdToken);\\n            path[1] = address(token);\\n            uint256 amountOutMin = router.getAmountsOut(amountIn, path)[1];\\n            router.swapExactTokensForTokens(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n        return desiredAmount;\\n    }\\n\\n    function swapReserveToToken(\\n        IERC20 reserveToken,\\n        uint256 amountIn,\\n        IERC20 token,\\n        uint256 amountOut\\n    ) private returns (uint256) {\\n        reserveToken.safeIncreaseAllowance(address(router), amountIn);\\n        // Swap reserve token for token\\n        address[] memory path = new address[](2);\\n        path[0] = address(reserveToken);\\n        path[1] = address(token);\\n\\n        if (address(token) == WETH) {\\n            return\\n                router.swapExactTokensForETH(\\n                    amountIn,\\n                    amountOut,\\n                    path,\\n                    msg.sender,\\n                    block.timestamp\\n                )[1];\\n        }\\n\\n        return\\n            router.swapExactTokensForTokens(\\n                amountIn,\\n                amountOut,\\n                path,\\n                msg.sender,\\n                block.timestamp\\n            )[1];\\n    }\\n\\n    function sendAmountOfUSDInNonReserveToken(\\n        uint256 amountInUsd,\\n        IERC20 token,\\n        uint256 minAmountOut\\n    ) private returns (uint256 amountOutNew) {\\n        uint256 amountOutWithUsd = calculateAmountOut(\\n            address(usdToken),\\n            amountInUsd,\\n            address(token)\\n        );\\n        // Check if wbtc output is better\\n        uint256 amountInWbtc = usdToWBTC(amountInUsd);\\n        uint256 amountOutWithWbtc = calculateAmountOut(\\n            address(wbtcToken),\\n            amountInWbtc,\\n            address(token)\\n        );\\n\\n        if (\\n            amountOutWithUsd < amountOutWithWbtc ||\\n            usdToken.balanceOf(address(this)) < amountInUsd\\n        ) {\\n            require(\\n                amountOutWithWbtc >= minAmountOut,\\n                \\\"PegDex: INSUFFICIENT_OUTPUT\\\"\\n            );\\n            return\\n                swapReserveToToken(\\n                    wbtcToken,\\n                    amountInWbtc,\\n                    token,\\n                    amountOutWithWbtc\\n                );\\n        }\\n        require(\\n            amountOutWithUsd >= minAmountOut,\\n            \\\"PegDex: INSUFFICIENT_OUTPUT\\\"\\n        );\\n        return\\n            swapReserveToToken(usdToken, amountInUsd, token, amountOutWithUsd);\\n    }\\n\\n    function calculateAmountWithFee(uint256 amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return (amount * (1000 - fee)) / 1000;\\n    }\\n\\n    function getAmountOutInUSD(uint256 copAmountIn)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 amountInMinFee = calculateAmountWithFee(copAmountIn);\\n        uint256 amountOutTRM = copToUsd(amountInMinFee);\\n        uint256 availableUSD = getAvailableUSD();\\n        if (availableUSD <= amountOutTRM) {\\n            return 0;\\n        }\\n        // Calculate the amount out with a higher penalty for taking out more liquidity\\n        return\\n            (amountInMinFee * (availableUSD - amountOutTRM)) /\\n            (usdToCop(availableUSD) + amountInMinFee);\\n    }\\n\\n    function sendAmountInUSDOfToken(\\n        uint256 amountUSD,\\n        IERC20 token,\\n        uint256 minAmountOut\\n    ) private returns (uint256) {\\n        if (\\n            address(token) == address(usdToken) ||\\n            address(token) == address(wbtcToken)\\n        ) {\\n            return\\n                sendAmountOfUSDInReserveToken(amountUSD, token, minAmountOut);\\n        }\\n\\n        return sendAmountOfUSDInNonReserveToken(amountUSD, token, minAmountOut);\\n    }\\n\\n    function swapTokensForCOPPreview(IERC20 token, uint256 amountIn)\\n        public\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        uint256 amounInWithFee = calculateAmountWithFee(amountIn);\\n        uint256 amountInReserve = amounInWithFee;\\n        if (\\n            address(token) != address(usdToken) &&\\n            address(token) != address(wbtcToken)\\n        ) {\\n            amountInReserve = calculateAmountOut(\\n                address(token),\\n                amounInWithFee,\\n                address(usdToken)\\n            );\\n            token = usdToken;\\n        }\\n        if (address(token) == address(usdToken)) {\\n            amountOut = usdToCop(amountInReserve);\\n        } else {\\n            amountOut = usdToCop(wBTCToUSD(amountInReserve));\\n        }\\n    }\\n\\n    function swapTokensForCOP(\\n        IERC20 token,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        uint256 deadline\\n    ) external nonReentrant ensure(deadline) returns (uint256 amountOut) {\\n        token.safeTransferFrom(msg.sender, address(this), amountIn);\\n        uint256 amountInMinFee = calculateAmountWithFee(amountIn);\\n        uint256 amountInReserve = amountInMinFee;\\n        if (\\n            address(token) != address(usdToken) &&\\n            address(token) != address(wbtcToken)\\n        ) {\\n            amountInReserve = calculateAmountOut(\\n                address(token),\\n                amountInMinFee,\\n                address(usdToken)\\n            );\\n\\n            address[] memory path = new address[](2);\\n            path[0] = address(token);\\n            path[1] = address(usdToken);\\n            token.safeIncreaseAllowance(address(router), amountInMinFee);\\n            router.swapExactTokensForTokens(\\n                amountInMinFee,\\n                amountInReserve,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n        amountOut = swapReserveTokenToCOP(token, amountInReserve, minAmountOut);\\n        emit Swapped(\\n            msg.sender,\\n            address(token),\\n            amountIn,\\n            address(copToken),\\n            amountOut\\n        );\\n    }\\n\\n    function swapCOPForTokensPreview(IERC20 token, uint256 amountIn)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 amountOutInUsd = getAmountOutInUSD(amountIn);\\n        if (address(token) == address(usdToken) || amountOutInUsd == 0) {\\n            return amountOutInUsd;\\n        }\\n        if (address(token) == address(wbtcToken)) {\\n            return usdToWBTC(amountOutInUsd);\\n        }\\n        uint256 amountInWbt = usdToWBTC(amountOutInUsd);\\n        uint256 totalOutWithUsd = calculateAmountOut(\\n            address(usdToken),\\n            amountOutInUsd,\\n            address(token)\\n        );\\n        uint256 totalOutWithWbtc = calculateAmountOut(\\n            address(wbtcToken),\\n            amountInWbt,\\n            address(token)\\n        );\\n        if (\\n            totalOutWithUsd < totalOutWithWbtc ||\\n            usdToken.balanceOf(address(this)) < amountOutInUsd\\n        ) {\\n            return totalOutWithWbtc;\\n        }\\n        return totalOutWithUsd;\\n    }\\n\\n    function swapCOPForTokens(\\n        IERC20 token,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        uint256 deadline\\n    )\\n        external\\n        nonReentrant\\n        ensure(deadline)\\n        onlyPeriodQuotaLeft(amountIn)\\n        returns (uint256 amountOut)\\n    {\\n        copToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        uint256 amountOutInUSD = getAmountOutInUSD(amountIn);\\n        require(amountOutInUSD > 0, \\\"PegDex: OUTPUT_TOO_LOW\\\");\\n        amountOut = sendAmountInUSDOfToken(amountOutInUSD, token, minAmountOut);\\n        // Update liquidity slot if slotAmount is set\\n        if (slotAmount > 0) {\\n            slotAvailable = slotAvailable - amountOutInUSD <= slotMinimum\\n                ? getTotalLiquidityInUSD() > slotAmount\\n                    ? slotAmount\\n                    : getTotalLiquidityInUSD()\\n                : slotAvailable - amountOutInUSD;\\n        }\\n\\n        emit Swapped(\\n            msg.sender,\\n            address(copToken),\\n            amountIn,\\n            address(token),\\n            amountOut\\n        );\\n    }\\n\\n    function swapMaticForCOPPreview(uint256 amountIn)\\n        public\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        amountOut = usdToCop(\\n            calculateAmountOut(\\n                WETH,\\n                calculateAmountWithFee(amountIn),\\n                address(usdToken)\\n            )\\n        );\\n    }\\n\\n    function swapMaticForCOP(uint256 minAmountOut, uint256 deadline)\\n        external\\n        payable\\n        nonReentrant\\n        ensure(deadline)\\n        returns (uint256 amountOut)\\n    {\\n        uint256 amountUsdOut = calculateAmountOut(\\n            WETH,\\n            calculateAmountWithFee(msg.value),\\n            address(usdToken)\\n        );\\n        address[] memory path = new address[](2);\\n        path[0] = WETH;\\n        path[1] = address(usdToken);\\n        router.swapExactETHForTokens{value: msg.value}(\\n            amountUsdOut,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        amountOut = usdToCop(amountUsdOut);\\n        require(amountOut >= minAmountOut, \\\"PegDex: INSUFFICIENT_OUTPUT\\\");\\n        copToken.safeTransfer(msg.sender, amountOut);\\n\\n        emit Swapped(msg.sender, WETH, msg.value, address(copToken), amountOut);\\n    }\\n\\n    function calculateAmountOut(\\n        address fromToken,\\n        uint256 fromTokenAmount,\\n        address toToken\\n    ) public view returns (uint256) {\\n        if (fromTokenAmount == 0) {\\n            return 0;\\n        }\\n        IUniswapV2Pair pair = IUniswapV2Pair(\\n            IUniswapV2Factory(router.factory()).getPair(fromToken, toToken)\\n        );\\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n        (uint256 fromTokenReserve, uint256 toTokenReserve) = pair.token0() ==\\n            fromToken\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n\\n        return\\n            router.getAmountOut(\\n                fromTokenAmount,\\n                fromTokenReserve,\\n                toTokenReserve\\n            );\\n    }\\n\\n    /**\\n     * @notice called when the owner wants to unlock erc20 tokens owned by the contract\\n     * @param _tokenAddress the address of the tokens to unlock\\n     * @param _to the address to send the tokens to\\n     * @param _amount amount of tokens to unlock\\n     */\\n    function transferAnyERC20(\\n        address _tokenAddress,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_tokenAddress).safeTransfer(_to, _amount);\\n    }\\n\\n    function setFee(uint16 _fee) external onlyOwner {\\n        fee = _fee;\\n    }\\n\\n    function setArtificialPrice(int256 _artificialPrice) external onlyOwner {\\n        require(_artificialPrice >= 0, \\\"PEGDEX: NEGATIVE_PRICE\\\");\\n        artificialPrice = _artificialPrice;\\n    }\\n\\n    function setLiquiditySlots(uint256 _amount, uint256 _minimum)\\n        external\\n        onlyOwner\\n    {\\n        require(_amount >= _minimum, \\\"PEGDEX: MIN_TOO_HIGH\\\");\\n        uint256 currentLiquidity = getTotalLiquidityInUSD();\\n        slotAmount = _amount;\\n        slotAvailable = currentLiquidity < _amount ? currentLiquidity : _amount;\\n        slotMinimum = _minimum;\\n    }\\n\\n    function getCopPrice() public view returns (int256 price) {\\n        price = artificialPrice == 0 ? getLatestPrice() : artificialPrice;\\n    }\\n\\n    function getTotalLiquidityInUSD() public view returns (uint256) {\\n        return\\n            usdToken.balanceOf(address(this)) +\\n            wBTCToUSD(wbtcToken.balanceOf(address(this)));\\n    }\\n\\n    function getAvailableUSD() public view returns (uint256) {\\n        if (slotAmount > 0) {\\n            return slotAvailable;\\n        }\\n\\n        return getTotalLiquidityInUSD();\\n    }\\n\\n    /**\\n     * @notice called when owner wants to unlock Matic owned by the contract\\n     * @param _to the address to send the tokens to\\n     * @param _amount amount of tokens to unlock\\n     */\\n    function transferMatic(address _to, uint256 _amount) external onlyOwner {\\n        (bool sent, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function copToUsd(uint256 copAmount) internal view returns (uint256) {\\n        uint256 usdPerCop = uint256(getCopPrice());\\n        uint256 expandedUsdAmount = copAmount * usdPerCop;\\n        return\\n            expandedUsdAmount /\\n            10 **\\n                (priceFeed.decimals() +\\n                    (copToken.decimals() - usdToken.decimals()));\\n    }\\n\\n    function usdToCop(uint256 usdAmount) internal view returns (uint256) {\\n        uint256 copAmount = (usdAmount * (10**(priceFeed.decimals()))) /\\n            uint256(getCopPrice());\\n        return copAmount * (10**(copToken.decimals() - usdToken.decimals()));\\n    }\\n}\\n\",\"keccak256\":\"0x273b45d59674c08c8270f34c607c0ec5a862d829b5b233e5a8ce7afae070406a\",\"license\":\"Unlicense\"},\"contracts/PriceConsumerV3.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract PriceConsumerV3 {\\n    AggregatorV3Interface internal priceFeed;\\n\\n    constructor(address feed) {\\n        priceFeed = AggregatorV3Interface(feed);\\n    }\\n\\n    /**\\n     * Returns the latest price\\n     */\\n    function getLatestPrice() public view returns (int256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return price;\\n    }\\n}\\n\",\"keccak256\":\"0xd37ff0d30fd60396da1f9f3c87bc0f84b9e9bcd250cbe160c2729b27665abcf5\",\"license\":\"Unlicense\"},\"contracts/SellLimitter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SellLimitter is Ownable {\\n    struct SoldInPeriod {\\n        uint256 amount;\\n        uint256 startOfPeriod;\\n    }\\n\\n    uint256 public daysInSellPeriod;\\n    uint256 public periodSellLimit;\\n    mapping(address => SoldInPeriod) public salesInPeriod;\\n\\n    modifier onlyPeriodQuotaLeft(uint256 sellAmount) {\\n        SoldInPeriod storage soldInPeriod = salesInPeriod[msg.sender];\\n        if (\\n            block.timestamp >=\\n            soldInPeriod.startOfPeriod + (daysInSellPeriod * 1 days)\\n        ) {\\n            soldInPeriod.amount = sellAmount;\\n            soldInPeriod.startOfPeriod = block.timestamp;\\n        } else {\\n            soldInPeriod.amount += sellAmount;\\n        }\\n        require(\\n            soldInPeriod.amount <= periodSellLimit,\\n            \\\"PegDex: PERIOD_LIMIT_EXCEEDED\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDaysInSellPeriod(uint256 _newDaysInSellPeriod)\\n        external\\n        onlyOwner\\n    {\\n        daysInSellPeriod = _newDaysInSellPeriod;\\n    }\\n\\n    function setPeriodSellLimit(uint256 _newPeriodSellLimit)\\n        external\\n        onlyOwner\\n    {\\n        periodSellLimit = _newPeriodSellLimit;\\n    }\\n}\\n\",\"keccak256\":\"0xa6b65c09a22bc27984d12ed1d0c65acbe60f195d60d9f3952afb87842fdab90d\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003a4338038062003a438339810160408190526200003491620001e8565b600080546001600160a01b0319166001600160a01b038816179055620000616200005b3390565b62000170565b6001600255600780546001600160a01b03808b166001600160a01b031992831617909255600880548a8416908316179055600980546006805489861694168417905561ffff8716600160a01b026001600160b01b03199091169389169390931792909217909155604080516315ab88c960e31b8152905163ad5c464891600480820192602092909190829003018186803b158015620000ff57600080fd5b505afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a9190620001c2565b600a80546001600160a01b0319166001600160a01b039290921691909117905560039190915560045550620002ab945050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208284031215620001d4578081fd5b8151620001e18162000292565b9392505050565b600080600080600080600080610100898b03121562000205578384fd5b8851620002128162000292565b60208a0151909850620002258162000292565b60408a0151909750620002388162000292565b60608a01519096506200024b8162000292565b60808a01519095506200025e8162000292565b60a08a015190945061ffff8116811462000276578384fd5b60c08a015160e0909a0151989b979a5095989497939692505050565b6001600160a01b0381168114620002a857600080fd5b50565b61378880620002bb6000396000f3fe6080604052600436106102195760003560e01c8063b12c31031161011d578063cf1126d0116100b0578063e1a1ebfe1161007f578063eb15b93611610064578063eb15b936146105e7578063f2fde38b14610607578063f897a22b1461062757600080fd5b8063e1a1ebfe146105b1578063e81884b9146105c757600080fd5b8063cf1126d01461053b578063d56cc40f14610551578063d57a258214610566578063ddca3f431461057c57600080fd5b8063c24eb13f116100ec578063c24eb13f146104d3578063c7aeaba4146104f3578063c886649714610506578063cda0ebc01461052657600080fd5b8063b12c310314610434578063b5277ee81461047d578063bb00143514610493578063c12bcf25146104b357600080fd5b8063715018a6116101b05780638e15f4731161017f578063a8fbde6811610164578063a8fbde68146103d4578063aba917ac146103f4578063ad5c46481461041457600080fd5b80638e15f4731461039f5780639cc631c2146103b457600080fd5b8063715018a61461032c5780637694116f146103415780638da5cb5b146103615780638e0055531461037f57600080fd5b80634454aa79116101ec5780634454aa79146102b45780635b6f547e146102d45780636557d577146102f65780636899abfc1461030c57600080fd5b80630249934e1461021e5780631a0767051461025157806327614df81461026657806337ee50751461029e575b600080fd5b34801561022a57600080fd5b5061023e6102393660046132dc565b610647565b6040519081526020015b60405180910390f35b34801561025d57600080fd5b5061023e610683565b34801561027257600080fd5b50600954610286906001600160a01b031681565b6040516001600160a01b039091168152602001610248565b3480156102aa57600080fd5b5061023e60035481565b3480156102c057600080fd5b50600754610286906001600160a01b031681565b3480156102e057600080fd5b506102f46102ef366004613116565b6106a2565b005b34801561030257600080fd5b5061023e600c5481565b34801561031857600080fd5b5061023e6103273660046132dc565b61071a565b34801561033857600080fd5b506102f461078e565b34801561034d57600080fd5b506102f461035c3660046132dc565b6107f4565b34801561036d57600080fd5b506001546001600160a01b0316610286565b34801561038b57600080fd5b506102f461039a366004613337565b610853565b3480156103ab57600080fd5b5061023e6108e9565b3480156103c057600080fd5b5061023e6103cf366004613156565b61098a565b3480156103e057600080fd5b5061023e6103ef3660046132a2565b610a33565b34801561040057600080fd5b5061023e61040f3660046132a2565b610ccf565b34801561042057600080fd5b50600a54610286906001600160a01b031681565b34801561044057600080fd5b5061046861044f3660046130de565b6005602052600090815260409020805460019091015482565b60408051928352602083019190915201610248565b34801561048957600080fd5b5061023e60045481565b34801561049f57600080fd5b506102f46104ae3660046132dc565b610fa0565b3480156104bf57600080fd5b5061023e6104ce366004613156565b610fff565b3480156104df57600080fd5b5061023e6104ee366004613181565b611142565b61023e610501366004613371565b61146a565b34801561051257600080fd5b506102f46105213660046132dc565b611754565b34801561053257600080fd5b5061023e611804565b34801561054757600080fd5b5061023e600e5481565b34801561055d57600080fd5b5061023e61181f565b34801561057257600080fd5b5061023e600b5481565b34801561058857600080fd5b5060095461059e90600160a01b900461ffff1681565b60405161ffff9091168152602001610248565b3480156105bd57600080fd5b5061023e600d5481565b3480156105d357600080fd5b506102f46105e2366004613156565b61192b565b3480156105f357600080fd5b506102f4610602366004613371565b611a28565b34801561061357600080fd5b506102f46106223660046130de565b611afc565b34801561063357600080fd5b50600854610286906001600160a01b031681565b600a5460009061067d90610678906001600160a01b031661066785611bde565b6008546001600160a01b0316611142565b611c15565b92915050565b600c54600090156106955750600d5490565b61069d61181f565b905090565b6001546001600160a01b031633146107015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6107156001600160a01b0384168383611df0565b505050565b60008061072683611bde565b9050600061073382611e99565b9050600061073f610683565b905081811161075357506000949350505050565b8261075d82611c15565b610767919061351e565b61077183836136ab565b61077b9085613669565b610785919061355b565b95945050505050565b6001546001600160a01b031633146107e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b6107f26000612075565b565b6001546001600160a01b0316331461084e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b600455565b6001546001600160a01b031633146108ad5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b6009805461ffff909216600160a01b027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60008054604080517ffeaf968c000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163feaf968c9160048083019260a0929190829003018186803b15801561094757600080fd5b505afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f9190613392565b509195945050505050565b60008061099683611bde565b60085490915081906001600160a01b038681169116148015906109c757506009546001600160a01b03868116911614155b156109f6576008546109e590869084906001600160a01b0316611142565b6008546001600160a01b0316955090505b6008546001600160a01b0386811691161415610a1c57610a1581611c15565b9250610a2b565b610a28610678826120df565b92505b505092915050565b6000600280541415610a875760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106f8565b600280558142811015610adc5760405162461bcd60e51b815260206004820152601860248201527f5065674465783a20444541444c494e455f45585049524544000000000000000060448201526064016106f8565b336000908152600560205260409020600354869190610afe9062015180613669565b8160010154610b0d919061351e565b4210610b2157818155426001820155610b3b565b81816000016000828254610b35919061351e565b90915550505b60045481541115610b8e5760405162461bcd60e51b815260206004820152601d60248201527f5065674465783a20504552494f445f4c494d49545f455843454544454400000060448201526064016106f8565b600754610ba6906001600160a01b031633308a612100565b6000610bb18861071a565b905060008111610c035760405162461bcd60e51b815260206004820152601660248201527f5065674465783a204f55545055545f544f4f5f4c4f570000000000000000000060448201526064016106f8565b610c0e818a89612157565b600c5490955015610c6357600e5481600d54610c2a91906136ab565b1115610c435780600d54610c3e91906136ab565b610c5f565b600c54610c4e61181f565b11610c5b57610c3e61181f565b600c545b600d555b600754604080513381526001600160a01b0392831660208201528082018b9052918b16606083015260808201879052517f692315744755ee6d80decaeb993d4b1bb95ff5db042cc47b32d5a7d858b019029181900360a00190a150506001600255509095945050505050565b6000600280541415610d235760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106f8565b600280558142811015610d785760405162461bcd60e51b815260206004820152601860248201527f5065674465783a20444541444c494e455f45585049524544000000000000000060448201526064016106f8565b610d8d6001600160a01b038716333088612100565b6000610d9886611bde565b60085490915081906001600160a01b03898116911614801590610dc957506009546001600160a01b03898116911614155b15610f2757600854610de790899084906001600160a01b0316611142565b60408051600280825260608201835292935060009290916020830190803683370190505090508881600081518110610e2f57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600854825191169082906001908110610e6e57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600654610e96918b81169116856121a5565b6006546040516338ed173960e01b81526001600160a01b03909116906338ed173990610ece90869086908690309042906004016134e2565b600060405180830381600087803b158015610ee857600080fd5b505af1158015610efc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f2491908101906131c2565b50505b610f32888288612298565b600754604080513381526001600160a01b03808d1660208301529181018b905291166060820152608081018290529094507f692315744755ee6d80decaeb993d4b1bb95ff5db042cc47b32d5a7d858b019029060a00160405180910390a15050600160025550949350505050565b6001546001600160a01b03163314610ffa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b600355565b60008061100b8361071a565b6008549091506001600160a01b0385811691161480611028575080155b1561103457905061067d565b6009546001600160a01b038581169116141561105b5761105381612339565b91505061067d565b600061106682612339565b600854909150600090611083906001600160a01b03168488611142565b6009549091506000906110a0906001600160a01b03168489611142565b90508082108061112857506008546040516370a0823160e01b815230600482015285916001600160a01b0316906370a082319060240160206040518083038186803b1580156110ee57600080fd5b505afa158015611102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111269190613359565b105b1561113857935061067d92505050565b5095945050505050565b60008261115157506000611463565b600654604080517fc45a015500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163c45a0155916004808301926020929190829003018186803b1580156111af57600080fd5b505afa1580156111c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e791906130fa565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528581166024830152919091169063e6a439059060440160206040518083038186803b15801561124b57600080fd5b505afa15801561125f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128391906130fa565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156112c157600080fd5b505afa1580156112d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f991906132f4565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600080886001600160a01b0316856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561136457600080fd5b505afa158015611378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139c91906130fa565b6001600160a01b0316146113b15782846113b4565b83835b6006546040517f054d50d4000000000000000000000000000000000000000000000000000000008152600481018c905260248101849052604481018390529294509092506001600160a01b03169063054d50d49060640160206040518083038186803b15801561142357600080fd5b505afa158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145b9190613359565b955050505050505b9392505050565b60006002805414156114be5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106f8565b6002805581428110156115135760405162461bcd60e51b815260206004820152601860248201527f5065674465783a20444541444c494e455f45585049524544000000000000000060448201526064016106f8565b600a5460009061152f906001600160a01b031661066734611bde565b60408051600280825260608201835292935060009290916020830190803683375050600a5482519293506001600160a01b03169183915060009061158357634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526008548251911690829060019081106115c257634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526006546040517f7ff36ab5000000000000000000000000000000000000000000000000000000008152911690637ff36ab59034906116209086908690309042906004016134ad565b6000604051808303818588803b15801561163957600080fd5b505af115801561164d573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261167691908101906131c2565b5061168082611c15565b9350858410156116d25760405162461bcd60e51b815260206004820152601b60248201527f5065674465783a20494e53554646494349454e545f4f5554505554000000000060448201526064016106f8565b6007546116e9906001600160a01b03163386611df0565b600a54600754604080513381526001600160a01b039384166020820152348183015292909116606083015260808201869052517f692315744755ee6d80decaeb993d4b1bb95ff5db042cc47b32d5a7d858b019029181900360a00190a1505060016002555092915050565b6001546001600160a01b031633146117ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b60008112156117ff5760405162461bcd60e51b815260206004820152601660248201527f5045474445583a204e454741544956455f50524943450000000000000000000060448201526064016106f8565b600b55565b6000600b546000146118175750600b5490565b61069d6108e9565b6009546040516370a0823160e01b81523060048201526000916118a6916001600160a01b03909116906370a082319060240160206040518083038186803b15801561186957600080fd5b505afa15801561187d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a19190613359565b6120df565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156118e957600080fd5b505afa1580156118fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119219190613359565b61069d919061351e565b6001546001600160a01b031633146119855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146119d2576040519150601f19603f3d011682016040523d82523d6000602084013e6119d7565b606091505b50509050806107155760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e6420457468657200000000000000000000000060448201526064016106f8565b6001546001600160a01b03163314611a825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b80821015611ad25760405162461bcd60e51b815260206004820152601460248201527f5045474445583a204d494e5f544f4f5f4849474800000000000000000000000060448201526064016106f8565b6000611adc61181f565b600c8490559050828110611af05782611af2565b805b600d5550600e5550565b6001546001600160a01b03163314611b565760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b6001600160a01b038116611bd25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106f8565b611bdb81612075565b50565b6009546000906103e890611bfd90600160a01b900461ffff1682613688565b611c0b9061ffff1684613669565b61067d919061355b565b600080611c20611804565b60008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6c57600080fd5b505afa158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca491906133e1565b611caf90600a6135be565b611cb99085613669565b611cc3919061355b565b9050600860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1357600080fd5b505afa158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b91906133e1565b600760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9957600080fd5b505afa158015611dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd191906133e1565b611ddb91906136c2565b611de690600a6135be565b6114639082613669565b6040516001600160a01b0383166024820152604481018290526107159084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261235a565b600080611ea4611804565b90506000611eb28285613669565b9050600860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0257600080fd5b505afa158015611f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3a91906133e1565b600760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8857600080fd5b505afa158015611f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc091906133e1565b611fca91906136c2565b60008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561201657600080fd5b505afa15801561202a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204e91906133e1565b6120589190613536565b61206390600a6135be565b61206d908261355b565b949350505050565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60095460085460009161067d916001600160a01b039182169185911661243f565b6040516001600160a01b03808516602483015283166044820152606481018290526121519085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611e35565b50505050565b6008546000906001600160a01b038481169116148061218357506009546001600160a01b038481169116145b1561219a576121938484846125a1565b9050611463565b61206d848484612636565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561220a57600080fd5b505afa15801561221e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122429190613359565b61224c919061351e565b6040516001600160a01b0385166024820152604481018290529091506121519085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611e35565b60095460009083906001600160a01b03868116911614156122bf576122bc846120df565b90505b6122c881611c15565b91508282101561231a5760405162461bcd60e51b815260206004820152601b60248201527f5065674465783a20494e53554646494349454e545f4f5554505554000000000060448201526064016106f8565b600754612331906001600160a01b03163384611df0565b509392505050565b60085460095460009161067d916001600160a01b039182169185911661243f565b60006123af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127ee9092919063ffffffff16565b80519091501561071557808060200190518101906123cd9190613282565b6107155760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106f8565b60008261244e57506000611463565b604080516002808252606082018352600092602083019080368337019050509050848160008151811061249157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106124d357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260065460405163d06ca61f60e01b8152600092919091169063d06ca61f906125179088908690600401613494565b60006040518083038186803b15801561252f57600080fd5b505afa158015612543573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261256b91908101906131c2565b90508060018151811061258e57634e487b7160e01b600052603260045260246000fd5b6020026020010151925050509392505050565b6009546000906001600160a01b03848116911614156125c6576125c384612339565b93505b6125d083856127fd565b9050818110156126225760405162461bcd60e51b815260206004820152601b60248201527f5065674465783a20494e53554646494349454e545f4f5554505554000000000060448201526064016106f8565b6114636001600160a01b0384163383611df0565b6008546000908190612652906001600160a01b03168686611142565b9050600061265f86612339565b60095490915060009061267c906001600160a01b03168388611142565b90508083108061270457506008546040516370a0823160e01b815230600482015288916001600160a01b0316906370a082319060240160206040518083038186803b1580156126ca57600080fd5b505afa1580156126de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127029190613359565b105b1561277b57848110156127595760405162461bcd60e51b815260206004820152601b60248201527f5065674465783a20494e53554646494349454e545f4f5554505554000000000060448201526064016106f8565b600954612771906001600160a01b0316838884612b30565b9350505050611463565b848310156127cb5760405162461bcd60e51b815260206004820152601b60248201527f5065674465783a20494e53554646494349454e545f4f5554505554000000000060448201526064016106f8565b6008546127e3906001600160a01b0316888886612b30565b979650505050505050565b606061206d8484600085612d8e565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a082319060240160206040518083038186803b15801561284157600080fd5b505afa158015612855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128799190613359565b905080831115612b2857600061288f82856136ab565b6008549091506000906001600160a01b038781169116146128b8576128b382612ecb565b6128c1565b6128c182612eeb565b6008549091506001600160a01b038781169116146128fb576006546008546128f6916001600160a01b039182169116836121a5565b612918565b600654600954612918916001600160a01b039182169116836121a5565b604080516002808252606082018352600092602083019080368337019050506008549091506001600160a01b03888116911614612960576008546001600160a01b031661296d565b6009546001600160a01b03165b8160008151811061298e57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505086816001815181106129d057634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260065460405163d06ca61f60e01b8152600092919091169063d06ca61f90612a149086908690600401613494565b60006040518083038186803b158015612a2c57600080fd5b505afa158015612a40573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a6891908101906131c2565b600181518110612a8857634e487b7160e01b600052603260045260246000fd5b60209081029190910101516006546040516338ed173960e01b81529192506001600160a01b0316906338ed173990612acc90869085908790309042906004016134e2565b600060405180830381600087803b158015612ae657600080fd5b505af1158015612afa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b2291908101906131c2565b50505050505b509092915050565b600654600090612b4d906001600160a01b038781169116866121a5565b6040805160028082526060820183526000926020830190803683370190505090508581600081518110612b9057634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110612bd257634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600a5485821691161415612ccd576006546040517f18cbafe50000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906318cbafe590612c4790889087908690339042906004016134e2565b600060405180830381600087803b158015612c6157600080fd5b505af1158015612c75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c9d91908101906131c2565b600181518110612cbd57634e487b7160e01b600052603260045260246000fd5b602002602001015191505061206d565b6006546040516338ed173960e01b81526001600160a01b03909116906338ed173990612d0590889087908690339042906004016134e2565b600060405180830381600087803b158015612d1f57600080fd5b505af1158015612d33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d5b91908101906131c2565b600181518110612d7b57634e487b7160e01b600052603260045260246000fd5b6020026020010151915050949350505050565b606082471015612e065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106f8565b6001600160a01b0385163b612e5d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106f8565b600080866001600160a01b03168587604051612e799190613445565b60006040518083038185875af1925050503d8060008114612eb6576040519150601f19603f3d011682016040523d82523d6000602084013e612ebb565b606091505b50915091506127e3828286612f0b565b60085460095460009161067d916001600160a01b03918216911684612f44565b60095460085460009161067d916001600160a01b03918216911684612f44565b60608315612f1a575081611463565b825115612f2a5782518084602001fd5b8160405162461bcd60e51b81526004016106f89190613461565b604080516002808252606082018352600092839291906020830190803683370190505090508481600081518110612f8b57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110612fcd57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526006546040517f1f00ca740000000000000000000000000000000000000000000000000000000081526000929190911690631f00ca749061302a9087908690600401613494565b60006040518083038186803b15801561304257600080fd5b505afa158015613056573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261307e91908101906131c2565b90508060008151811061258e57634e487b7160e01b600052603260045260246000fd5b80516dffffffffffffffffffffffffffff811681146130bf57600080fd5b919050565b805169ffffffffffffffffffff811681146130bf57600080fd5b6000602082840312156130ef578081fd5b81356114638161373d565b60006020828403121561310b578081fd5b81516114638161373d565b60008060006060848603121561312a578182fd5b83356131358161373d565b925060208401356131458161373d565b929592945050506040919091013590565b60008060408385031215613168578182fd5b82356131738161373d565b946020939093013593505050565b600080600060608486031215613195578283fd5b83356131a08161373d565b92506020840135915060408401356131b78161373d565b809150509250925092565b600060208083850312156131d4578182fd5b825167ffffffffffffffff808211156131eb578384fd5b818501915085601f8301126131fe578384fd5b81518181111561321057613210613727565b8060051b604051601f19603f8301168101818110858211171561323557613235613727565b604052828152858101935084860182860187018a1015613253578788fd5b8795505b83861015613275578051855260019590950194938601938601613257565b5098975050505050505050565b600060208284031215613293578081fd5b81518015158114611463578182fd5b600080600080608085870312156132b7578081fd5b84356132c28161373d565b966020860135965060408601359560600135945092505050565b6000602082840312156132ed578081fd5b5035919050565b600080600060608486031215613308578283fd5b613311846130a1565b925061331f602085016130a1565b9150604084015163ffffffff811681146131b7578182fd5b600060208284031215613348578081fd5b813561ffff81168114611463578182fd5b60006020828403121561336a578081fd5b5051919050565b60008060408385031215613383578182fd5b50508035926020909101359150565b600080600080600060a086880312156133a9578283fd5b6133b2866130c4565b94506020860151935060408601519250606086015191506133d5608087016130c4565b90509295509295909350565b6000602082840312156133f2578081fd5b815160ff81168114611463578182fd5b6000815180845260208085019450808401835b8381101561343a5781516001600160a01b031687529582019590820190600101613415565b509495945050505050565b600082516134578184602087016136e5565b9190910192915050565b60208152600082518060208401526134808160408501602087016136e5565b601f01601f19169190910160400192915050565b82815260406020820152600061206d6040830184613402565b8481526080602082015260006134c66080830186613402565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a06040820152600061350160a0830186613402565b6001600160a01b0394909416606083015250608001529392505050565b6000821982111561353157613531613711565b500190565b600060ff821660ff84168060ff0382111561355357613553613711565b019392505050565b60008261357657634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156135b657816000190482111561359c5761359c613711565b808516156135a957918102915b93841c9390800290613580565b509250929050565b600061146360ff8416836000826135d75750600161067d565b816135e45750600061067d565b81600181146135fa576002811461360457613620565b600191505061067d565b60ff84111561361557613615613711565b50506001821b61067d565b5060208310610133831016604e8410600b8410161715613643575081810a61067d565b61364d838361357b565b806000190482111561366157613661613711565b029392505050565b600081600019048311821515161561368357613683613711565b500290565b600061ffff838116908316818110156136a3576136a3613711565b039392505050565b6000828210156136bd576136bd613711565b500390565b600060ff821660ff8416808210156136dc576136dc613711565b90039392505050565b60005b838110156137005781810151838201526020016136e8565b838111156121515750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611bdb57600080fdfea2646970667358221220b0481bff3a858f8f666754382351fc637ccbbd72d9640ecb1ad013355fc9b76064736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102195760003560e01c8063b12c31031161011d578063cf1126d0116100b0578063e1a1ebfe1161007f578063eb15b93611610064578063eb15b936146105e7578063f2fde38b14610607578063f897a22b1461062757600080fd5b8063e1a1ebfe146105b1578063e81884b9146105c757600080fd5b8063cf1126d01461053b578063d56cc40f14610551578063d57a258214610566578063ddca3f431461057c57600080fd5b8063c24eb13f116100ec578063c24eb13f146104d3578063c7aeaba4146104f3578063c886649714610506578063cda0ebc01461052657600080fd5b8063b12c310314610434578063b5277ee81461047d578063bb00143514610493578063c12bcf25146104b357600080fd5b8063715018a6116101b05780638e15f4731161017f578063a8fbde6811610164578063a8fbde68146103d4578063aba917ac146103f4578063ad5c46481461041457600080fd5b80638e15f4731461039f5780639cc631c2146103b457600080fd5b8063715018a61461032c5780637694116f146103415780638da5cb5b146103615780638e0055531461037f57600080fd5b80634454aa79116101ec5780634454aa79146102b45780635b6f547e146102d45780636557d577146102f65780636899abfc1461030c57600080fd5b80630249934e1461021e5780631a0767051461025157806327614df81461026657806337ee50751461029e575b600080fd5b34801561022a57600080fd5b5061023e6102393660046132dc565b610647565b6040519081526020015b60405180910390f35b34801561025d57600080fd5b5061023e610683565b34801561027257600080fd5b50600954610286906001600160a01b031681565b6040516001600160a01b039091168152602001610248565b3480156102aa57600080fd5b5061023e60035481565b3480156102c057600080fd5b50600754610286906001600160a01b031681565b3480156102e057600080fd5b506102f46102ef366004613116565b6106a2565b005b34801561030257600080fd5b5061023e600c5481565b34801561031857600080fd5b5061023e6103273660046132dc565b61071a565b34801561033857600080fd5b506102f461078e565b34801561034d57600080fd5b506102f461035c3660046132dc565b6107f4565b34801561036d57600080fd5b506001546001600160a01b0316610286565b34801561038b57600080fd5b506102f461039a366004613337565b610853565b3480156103ab57600080fd5b5061023e6108e9565b3480156103c057600080fd5b5061023e6103cf366004613156565b61098a565b3480156103e057600080fd5b5061023e6103ef3660046132a2565b610a33565b34801561040057600080fd5b5061023e61040f3660046132a2565b610ccf565b34801561042057600080fd5b50600a54610286906001600160a01b031681565b34801561044057600080fd5b5061046861044f3660046130de565b6005602052600090815260409020805460019091015482565b60408051928352602083019190915201610248565b34801561048957600080fd5b5061023e60045481565b34801561049f57600080fd5b506102f46104ae3660046132dc565b610fa0565b3480156104bf57600080fd5b5061023e6104ce366004613156565b610fff565b3480156104df57600080fd5b5061023e6104ee366004613181565b611142565b61023e610501366004613371565b61146a565b34801561051257600080fd5b506102f46105213660046132dc565b611754565b34801561053257600080fd5b5061023e611804565b34801561054757600080fd5b5061023e600e5481565b34801561055d57600080fd5b5061023e61181f565b34801561057257600080fd5b5061023e600b5481565b34801561058857600080fd5b5060095461059e90600160a01b900461ffff1681565b60405161ffff9091168152602001610248565b3480156105bd57600080fd5b5061023e600d5481565b3480156105d357600080fd5b506102f46105e2366004613156565b61192b565b3480156105f357600080fd5b506102f4610602366004613371565b611a28565b34801561061357600080fd5b506102f46106223660046130de565b611afc565b34801561063357600080fd5b50600854610286906001600160a01b031681565b600a5460009061067d90610678906001600160a01b031661066785611bde565b6008546001600160a01b0316611142565b611c15565b92915050565b600c54600090156106955750600d5490565b61069d61181f565b905090565b6001546001600160a01b031633146107015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6107156001600160a01b0384168383611df0565b505050565b60008061072683611bde565b9050600061073382611e99565b9050600061073f610683565b905081811161075357506000949350505050565b8261075d82611c15565b610767919061351e565b61077183836136ab565b61077b9085613669565b610785919061355b565b95945050505050565b6001546001600160a01b031633146107e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b6107f26000612075565b565b6001546001600160a01b0316331461084e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b600455565b6001546001600160a01b031633146108ad5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b6009805461ffff909216600160a01b027fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60008054604080517ffeaf968c000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163feaf968c9160048083019260a0929190829003018186803b15801561094757600080fd5b505afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f9190613392565b509195945050505050565b60008061099683611bde565b60085490915081906001600160a01b038681169116148015906109c757506009546001600160a01b03868116911614155b156109f6576008546109e590869084906001600160a01b0316611142565b6008546001600160a01b0316955090505b6008546001600160a01b0386811691161415610a1c57610a1581611c15565b9250610a2b565b610a28610678826120df565b92505b505092915050565b6000600280541415610a875760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106f8565b600280558142811015610adc5760405162461bcd60e51b815260206004820152601860248201527f5065674465783a20444541444c494e455f45585049524544000000000000000060448201526064016106f8565b336000908152600560205260409020600354869190610afe9062015180613669565b8160010154610b0d919061351e565b4210610b2157818155426001820155610b3b565b81816000016000828254610b35919061351e565b90915550505b60045481541115610b8e5760405162461bcd60e51b815260206004820152601d60248201527f5065674465783a20504552494f445f4c494d49545f455843454544454400000060448201526064016106f8565b600754610ba6906001600160a01b031633308a612100565b6000610bb18861071a565b905060008111610c035760405162461bcd60e51b815260206004820152601660248201527f5065674465783a204f55545055545f544f4f5f4c4f570000000000000000000060448201526064016106f8565b610c0e818a89612157565b600c5490955015610c6357600e5481600d54610c2a91906136ab565b1115610c435780600d54610c3e91906136ab565b610c5f565b600c54610c4e61181f565b11610c5b57610c3e61181f565b600c545b600d555b600754604080513381526001600160a01b0392831660208201528082018b9052918b16606083015260808201879052517f692315744755ee6d80decaeb993d4b1bb95ff5db042cc47b32d5a7d858b019029181900360a00190a150506001600255509095945050505050565b6000600280541415610d235760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106f8565b600280558142811015610d785760405162461bcd60e51b815260206004820152601860248201527f5065674465783a20444541444c494e455f45585049524544000000000000000060448201526064016106f8565b610d8d6001600160a01b038716333088612100565b6000610d9886611bde565b60085490915081906001600160a01b03898116911614801590610dc957506009546001600160a01b03898116911614155b15610f2757600854610de790899084906001600160a01b0316611142565b60408051600280825260608201835292935060009290916020830190803683370190505090508881600081518110610e2f57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600854825191169082906001908110610e6e57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600654610e96918b81169116856121a5565b6006546040516338ed173960e01b81526001600160a01b03909116906338ed173990610ece90869086908690309042906004016134e2565b600060405180830381600087803b158015610ee857600080fd5b505af1158015610efc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f2491908101906131c2565b50505b610f32888288612298565b600754604080513381526001600160a01b03808d1660208301529181018b905291166060820152608081018290529094507f692315744755ee6d80decaeb993d4b1bb95ff5db042cc47b32d5a7d858b019029060a00160405180910390a15050600160025550949350505050565b6001546001600160a01b03163314610ffa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b600355565b60008061100b8361071a565b6008549091506001600160a01b0385811691161480611028575080155b1561103457905061067d565b6009546001600160a01b038581169116141561105b5761105381612339565b91505061067d565b600061106682612339565b600854909150600090611083906001600160a01b03168488611142565b6009549091506000906110a0906001600160a01b03168489611142565b90508082108061112857506008546040516370a0823160e01b815230600482015285916001600160a01b0316906370a082319060240160206040518083038186803b1580156110ee57600080fd5b505afa158015611102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111269190613359565b105b1561113857935061067d92505050565b5095945050505050565b60008261115157506000611463565b600654604080517fc45a015500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163c45a0155916004808301926020929190829003018186803b1580156111af57600080fd5b505afa1580156111c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e791906130fa565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528581166024830152919091169063e6a439059060440160206040518083038186803b15801561124b57600080fd5b505afa15801561125f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128391906130fa565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156112c157600080fd5b505afa1580156112d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f991906132f4565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600080886001600160a01b0316856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561136457600080fd5b505afa158015611378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139c91906130fa565b6001600160a01b0316146113b15782846113b4565b83835b6006546040517f054d50d4000000000000000000000000000000000000000000000000000000008152600481018c905260248101849052604481018390529294509092506001600160a01b03169063054d50d49060640160206040518083038186803b15801561142357600080fd5b505afa158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145b9190613359565b955050505050505b9392505050565b60006002805414156114be5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106f8565b6002805581428110156115135760405162461bcd60e51b815260206004820152601860248201527f5065674465783a20444541444c494e455f45585049524544000000000000000060448201526064016106f8565b600a5460009061152f906001600160a01b031661066734611bde565b60408051600280825260608201835292935060009290916020830190803683375050600a5482519293506001600160a01b03169183915060009061158357634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526008548251911690829060019081106115c257634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526006546040517f7ff36ab5000000000000000000000000000000000000000000000000000000008152911690637ff36ab59034906116209086908690309042906004016134ad565b6000604051808303818588803b15801561163957600080fd5b505af115801561164d573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261167691908101906131c2565b5061168082611c15565b9350858410156116d25760405162461bcd60e51b815260206004820152601b60248201527f5065674465783a20494e53554646494349454e545f4f5554505554000000000060448201526064016106f8565b6007546116e9906001600160a01b03163386611df0565b600a54600754604080513381526001600160a01b039384166020820152348183015292909116606083015260808201869052517f692315744755ee6d80decaeb993d4b1bb95ff5db042cc47b32d5a7d858b019029181900360a00190a1505060016002555092915050565b6001546001600160a01b031633146117ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b60008112156117ff5760405162461bcd60e51b815260206004820152601660248201527f5045474445583a204e454741544956455f50524943450000000000000000000060448201526064016106f8565b600b55565b6000600b546000146118175750600b5490565b61069d6108e9565b6009546040516370a0823160e01b81523060048201526000916118a6916001600160a01b03909116906370a082319060240160206040518083038186803b15801561186957600080fd5b505afa15801561187d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a19190613359565b6120df565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156118e957600080fd5b505afa1580156118fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119219190613359565b61069d919061351e565b6001546001600160a01b031633146119855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146119d2576040519150601f19603f3d011682016040523d82523d6000602084013e6119d7565b606091505b50509050806107155760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e6420457468657200000000000000000000000060448201526064016106f8565b6001546001600160a01b03163314611a825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b80821015611ad25760405162461bcd60e51b815260206004820152601460248201527f5045474445583a204d494e5f544f4f5f4849474800000000000000000000000060448201526064016106f8565b6000611adc61181f565b600c8490559050828110611af05782611af2565b805b600d5550600e5550565b6001546001600160a01b03163314611b565760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b6001600160a01b038116611bd25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106f8565b611bdb81612075565b50565b6009546000906103e890611bfd90600160a01b900461ffff1682613688565b611c0b9061ffff1684613669565b61067d919061355b565b600080611c20611804565b60008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6c57600080fd5b505afa158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca491906133e1565b611caf90600a6135be565b611cb99085613669565b611cc3919061355b565b9050600860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1357600080fd5b505afa158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b91906133e1565b600760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9957600080fd5b505afa158015611dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd191906133e1565b611ddb91906136c2565b611de690600a6135be565b6114639082613669565b6040516001600160a01b0383166024820152604481018290526107159084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261235a565b600080611ea4611804565b90506000611eb28285613669565b9050600860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0257600080fd5b505afa158015611f16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3a91906133e1565b600760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8857600080fd5b505afa158015611f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc091906133e1565b611fca91906136c2565b60008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561201657600080fd5b505afa15801561202a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204e91906133e1565b6120589190613536565b61206390600a6135be565b61206d908261355b565b949350505050565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60095460085460009161067d916001600160a01b039182169185911661243f565b6040516001600160a01b03808516602483015283166044820152606481018290526121519085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611e35565b50505050565b6008546000906001600160a01b038481169116148061218357506009546001600160a01b038481169116145b1561219a576121938484846125a1565b9050611463565b61206d848484612636565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561220a57600080fd5b505afa15801561221e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122429190613359565b61224c919061351e565b6040516001600160a01b0385166024820152604481018290529091506121519085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611e35565b60095460009083906001600160a01b03868116911614156122bf576122bc846120df565b90505b6122c881611c15565b91508282101561231a5760405162461bcd60e51b815260206004820152601b60248201527f5065674465783a20494e53554646494349454e545f4f5554505554000000000060448201526064016106f8565b600754612331906001600160a01b03163384611df0565b509392505050565b60085460095460009161067d916001600160a01b039182169185911661243f565b60006123af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127ee9092919063ffffffff16565b80519091501561071557808060200190518101906123cd9190613282565b6107155760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106f8565b60008261244e57506000611463565b604080516002808252606082018352600092602083019080368337019050509050848160008151811061249157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106124d357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260065460405163d06ca61f60e01b8152600092919091169063d06ca61f906125179088908690600401613494565b60006040518083038186803b15801561252f57600080fd5b505afa158015612543573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261256b91908101906131c2565b90508060018151811061258e57634e487b7160e01b600052603260045260246000fd5b6020026020010151925050509392505050565b6009546000906001600160a01b03848116911614156125c6576125c384612339565b93505b6125d083856127fd565b9050818110156126225760405162461bcd60e51b815260206004820152601b60248201527f5065674465783a20494e53554646494349454e545f4f5554505554000000000060448201526064016106f8565b6114636001600160a01b0384163383611df0565b6008546000908190612652906001600160a01b03168686611142565b9050600061265f86612339565b60095490915060009061267c906001600160a01b03168388611142565b90508083108061270457506008546040516370a0823160e01b815230600482015288916001600160a01b0316906370a082319060240160206040518083038186803b1580156126ca57600080fd5b505afa1580156126de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127029190613359565b105b1561277b57848110156127595760405162461bcd60e51b815260206004820152601b60248201527f5065674465783a20494e53554646494349454e545f4f5554505554000000000060448201526064016106f8565b600954612771906001600160a01b0316838884612b30565b9350505050611463565b848310156127cb5760405162461bcd60e51b815260206004820152601b60248201527f5065674465783a20494e53554646494349454e545f4f5554505554000000000060448201526064016106f8565b6008546127e3906001600160a01b0316888886612b30565b979650505050505050565b606061206d8484600085612d8e565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a082319060240160206040518083038186803b15801561284157600080fd5b505afa158015612855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128799190613359565b905080831115612b2857600061288f82856136ab565b6008549091506000906001600160a01b038781169116146128b8576128b382612ecb565b6128c1565b6128c182612eeb565b6008549091506001600160a01b038781169116146128fb576006546008546128f6916001600160a01b039182169116836121a5565b612918565b600654600954612918916001600160a01b039182169116836121a5565b604080516002808252606082018352600092602083019080368337019050506008549091506001600160a01b03888116911614612960576008546001600160a01b031661296d565b6009546001600160a01b03165b8160008151811061298e57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505086816001815181106129d057634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260065460405163d06ca61f60e01b8152600092919091169063d06ca61f90612a149086908690600401613494565b60006040518083038186803b158015612a2c57600080fd5b505afa158015612a40573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a6891908101906131c2565b600181518110612a8857634e487b7160e01b600052603260045260246000fd5b60209081029190910101516006546040516338ed173960e01b81529192506001600160a01b0316906338ed173990612acc90869085908790309042906004016134e2565b600060405180830381600087803b158015612ae657600080fd5b505af1158015612afa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b2291908101906131c2565b50505050505b509092915050565b600654600090612b4d906001600160a01b038781169116866121a5565b6040805160028082526060820183526000926020830190803683370190505090508581600081518110612b9057634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110612bd257634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600a5485821691161415612ccd576006546040517f18cbafe50000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906318cbafe590612c4790889087908690339042906004016134e2565b600060405180830381600087803b158015612c6157600080fd5b505af1158015612c75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c9d91908101906131c2565b600181518110612cbd57634e487b7160e01b600052603260045260246000fd5b602002602001015191505061206d565b6006546040516338ed173960e01b81526001600160a01b03909116906338ed173990612d0590889087908690339042906004016134e2565b600060405180830381600087803b158015612d1f57600080fd5b505af1158015612d33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d5b91908101906131c2565b600181518110612d7b57634e487b7160e01b600052603260045260246000fd5b6020026020010151915050949350505050565b606082471015612e065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106f8565b6001600160a01b0385163b612e5d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106f8565b600080866001600160a01b03168587604051612e799190613445565b60006040518083038185875af1925050503d8060008114612eb6576040519150601f19603f3d011682016040523d82523d6000602084013e612ebb565b606091505b50915091506127e3828286612f0b565b60085460095460009161067d916001600160a01b03918216911684612f44565b60095460085460009161067d916001600160a01b03918216911684612f44565b60608315612f1a575081611463565b825115612f2a5782518084602001fd5b8160405162461bcd60e51b81526004016106f89190613461565b604080516002808252606082018352600092839291906020830190803683370190505090508481600081518110612f8b57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110612fcd57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526006546040517f1f00ca740000000000000000000000000000000000000000000000000000000081526000929190911690631f00ca749061302a9087908690600401613494565b60006040518083038186803b15801561304257600080fd5b505afa158015613056573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261307e91908101906131c2565b90508060008151811061258e57634e487b7160e01b600052603260045260246000fd5b80516dffffffffffffffffffffffffffff811681146130bf57600080fd5b919050565b805169ffffffffffffffffffff811681146130bf57600080fd5b6000602082840312156130ef578081fd5b81356114638161373d565b60006020828403121561310b578081fd5b81516114638161373d565b60008060006060848603121561312a578182fd5b83356131358161373d565b925060208401356131458161373d565b929592945050506040919091013590565b60008060408385031215613168578182fd5b82356131738161373d565b946020939093013593505050565b600080600060608486031215613195578283fd5b83356131a08161373d565b92506020840135915060408401356131b78161373d565b809150509250925092565b600060208083850312156131d4578182fd5b825167ffffffffffffffff808211156131eb578384fd5b818501915085601f8301126131fe578384fd5b81518181111561321057613210613727565b8060051b604051601f19603f8301168101818110858211171561323557613235613727565b604052828152858101935084860182860187018a1015613253578788fd5b8795505b83861015613275578051855260019590950194938601938601613257565b5098975050505050505050565b600060208284031215613293578081fd5b81518015158114611463578182fd5b600080600080608085870312156132b7578081fd5b84356132c28161373d565b966020860135965060408601359560600135945092505050565b6000602082840312156132ed578081fd5b5035919050565b600080600060608486031215613308578283fd5b613311846130a1565b925061331f602085016130a1565b9150604084015163ffffffff811681146131b7578182fd5b600060208284031215613348578081fd5b813561ffff81168114611463578182fd5b60006020828403121561336a578081fd5b5051919050565b60008060408385031215613383578182fd5b50508035926020909101359150565b600080600080600060a086880312156133a9578283fd5b6133b2866130c4565b94506020860151935060408601519250606086015191506133d5608087016130c4565b90509295509295909350565b6000602082840312156133f2578081fd5b815160ff81168114611463578182fd5b6000815180845260208085019450808401835b8381101561343a5781516001600160a01b031687529582019590820190600101613415565b509495945050505050565b600082516134578184602087016136e5565b9190910192915050565b60208152600082518060208401526134808160408501602087016136e5565b601f01601f19169190910160400192915050565b82815260406020820152600061206d6040830184613402565b8481526080602082015260006134c66080830186613402565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a06040820152600061350160a0830186613402565b6001600160a01b0394909416606083015250608001529392505050565b6000821982111561353157613531613711565b500190565b600060ff821660ff84168060ff0382111561355357613553613711565b019392505050565b60008261357657634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156135b657816000190482111561359c5761359c613711565b808516156135a957918102915b93841c9390800290613580565b509250929050565b600061146360ff8416836000826135d75750600161067d565b816135e45750600061067d565b81600181146135fa576002811461360457613620565b600191505061067d565b60ff84111561361557613615613711565b50506001821b61067d565b5060208310610133831016604e8410600b8410161715613643575081810a61067d565b61364d838361357b565b806000190482111561366157613661613711565b029392505050565b600081600019048311821515161561368357613683613711565b500290565b600061ffff838116908316818110156136a3576136a3613711565b039392505050565b6000828210156136bd576136bd613711565b500390565b600060ff821660ff8416808210156136dc576136dc613711565b90039392505050565b60005b838110156137005781810151838201526020016136e8565b838111156121515750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611bdb57600080fdfea2646970667358221220b0481bff3a858f8f666754382351fc637ccbbd72d9640ecb1ad013355fc9b76064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferAnyERC20(address,address,uint256)": {
        "params": {
          "_amount": "amount of tokens to unlock",
          "_to": "the address to send the tokens to",
          "_tokenAddress": "the address of the tokens to unlock"
        }
      },
      "transferMatic(address,uint256)": {
        "params": {
          "_amount": "amount of tokens to unlock",
          "_to": "the address to send the tokens to"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLatestPrice()": {
        "notice": "Returns the latest price"
      },
      "transferAnyERC20(address,address,uint256)": {
        "notice": "called when the owner wants to unlock erc20 tokens owned by the contract"
      },
      "transferMatic(address,uint256)": {
        "notice": "called when owner wants to unlock Matic owned by the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5594,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 585,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 785,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5634,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "daysInSellPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5636,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "periodSellLimit",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5641,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "salesInPeriod",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(SoldInPeriod)5632_storage)"
      },
      {
        "astId": 3852,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "router",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IUniswapV2Router02)3802"
      },
      {
        "astId": 3855,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "copToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20Metadata)1586"
      },
      {
        "astId": 3858,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "usdToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20Metadata)1586"
      },
      {
        "astId": 3861,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "wbtcToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)1480"
      },
      {
        "astId": 3863,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "fee",
        "offset": 20,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 3865,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "WETH",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3867,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "artificialPrice",
        "offset": 0,
        "slot": "11",
        "type": "t_int256"
      },
      {
        "astId": 3869,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "slotAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3871,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "slotAvailable",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3873,
        "contract": "contracts/PegDex.sol:PegDex",
        "label": "slotMinimum",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1480": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)1586": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)3802": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(SoldInPeriod)5632_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SellLimitter.SoldInPeriod)",
        "numberOfBytes": "32",
        "value": "t_struct(SoldInPeriod)5632_storage"
      },
      "t_struct(SoldInPeriod)5632_storage": {
        "encoding": "inplace",
        "label": "struct SellLimitter.SoldInPeriod",
        "members": [
          {
            "astId": 5629,
            "contract": "contracts/PegDex.sol:PegDex",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5631,
            "contract": "contracts/PegDex.sol:PegDex",
            "label": "startOfPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}